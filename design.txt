# shadow lang design

i figured having something more complete might make development a little more collected
so here is that, or something.

## general syntax

### comments

- `//` from appearance to end of line
- `/* */` inline or multiline
- no further restrictions - eg. `//!` could be idiomatically a doc-comment, but this is not primitive nor standard-enforced

### effectual directives
[TODO: consider scrapping these??]

in the form

```sdw
#[name] [arg]?*
```

may include:
* `#link [file path]`                   -> instruct the compiler to link to another file
* `#if [cond]`                          ] 
* `#else if [cond]`                     ]} -> conditional compilation
* `#else`                               ]
* `#feature [name]`                     -> similar to `if` - check if feature flag has been enabled
[TODO: evaluate plausability of using macros instead of directives for less primitives]

not user declared.
may not be present inline.

### ineffectual directives

in the form

```shadow
#\[[name] [arg]*?\]
```

these are user declared. [TODO: how?]
they have no direct impact on compilation.
compilers must parse them correctly, but are not required to take action upon them.
they might, however, still produce warnings or errors.
examples of usage:

```sdw
#[ must_be_read ]
type Result = [..];

function_returning_result([..]); // not handling the error produces a non-fatal, disableable warning.
function_returning_result([..]).unwrap(); // value is utilised; no error
                                          // note: example syntax.
```

they may also be used inline, though they have a low precedence so parenthesese may be required:

```
// compiler may be able to reason about the expression differently.
(#[ num_in_range 0 100 ] function_returning_range()) - 50
```

### general language structure

beyond the language standard, no further rules.
* `stdlib`
  * small `core` module must be present, containing the bare minimum necessary
   namely: `syscall` wrappers [TODO: anything more?]
  * no further requirements.
* no ecosystem
  - no formatting standard
  - no idiomacy standard
  - no package management
  - no testing standards
  - ect..
* no compiler

all the above are provided seperately no enable modularity inside the ecosystem.
obviously, i will create a range of tooling, and standards to acompany them, but they are not mandatory to use.
* not allowed to distribute wider ecosystem with `shadow` in name (prevent any kind of `shadow official tooling`)?

## structures

### statements

there are very few statements.
statements must be followed by a semicolon (;)

function declarations:

```sdw
fn [return_type] [name]([[type] [name]]?*) [expr];
```

-> `return [expr];`
    may only be present inside a function expression.
    enables early return.
    the type of `[expr]` must equal the type of `[return_type]`

function stub:
instructs the compiler there is a function, but does not provide the body.
used to produce interfaces and external function bodies.

```sdw
fn [name]([type]?*);
```

macro declarations:
functions whcih run at compile time. using the keyword `state` they can get access to a lot of compile-time info, such as invocation 
circumstances, the program AST, full project metadata ect..
[TODO: re-reevaluate the naming (macro is somewhat misleading)]
note: NO RETURN VALUES MAY BE PRESENT.
    -> a macro "returns" by modifying the AST at its invocation directly.

```sdw
mac [name]\[\] [expr];
```

loops:
1 of 3 forms of control flow in `sdw`
the value of the `expr` is not utilised.

```sdw
loop [expr];
```

goto / labels:

```sdw
@[name]; // declare label
goto @[name]; // jump to a label
```

no `break` / `continue` primtives - encourage usage of `goto` for this purpose.

[TODO: consider ditching `loop` and just using `goto` + conditionals. could use convenience macro - like for `while` / `for`]

type declaration:

```sdw
type [name] [type bound];
```

variable declaration:
[TODO: revisit patterns]

```sdw
let [name] = [expr];
```

## macro invocations

since they add to the program AST, they do not fall into either expressions or statements (rather, the code they produce does)
the syntax is as follows:

```sdw
[name]\[\]
```

## expressions

the main structure of sdw
an expression evaluates to a singluar value.
this value can be discarded by following the offending expression with a semicolon (`;`)
*discarded values are still evaluated*

```sdw
fn foo() {
    std.printLn("side effect!");
}

fn main() {
    // although this expression is discarded, the print still runs.
    foo();
}
```

an unused expression value is a compiletime error.

### operators

binary: `+`, `-`, `*`, `/`, `%`
bitwise: `|`, `&`, `~`, `^` `>>`, `<<`
unary: `-`, `+`
-> operands must be integers

logical: `&&`, `||`, `!`
comparison: `>`, `>=`, `<`, `<=`, `==`, `!=` 
-> operands must be booleans

referal: `&`
-> unary
indirection: `*`
-> unary; operand must be of type pointer

[TODO: `sizeof`, `typeof`, type conversions ect..? <https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B>]

as you'd expect

### blocks

a block - written `{ [constituent expressions]?* }` - evaluates to the value of the last member expressions
*this also applies to discarded final member expressions.* ie.

```sdw
{
    std.printLn("hello world!");
} // this block has a discarded value.
```

---
relatedly, expressions can be grouped just as one would expect with parenthesese (`()`)

### `struct` member access

dot notation for both pointers to structs and structs (`.`).

```sdw
[struct literal].[member name]
```

### pointers

to take a pointer:

```sdw
&[variable expression]
```

to dereference a pointer:

```sdw
*[pointer expression]
```

pointer arithmetic is disallowed.
[TODO: are there any uses for this outside of array indexing?]

### function call

```sdw
[name]([name]?*)
```

### conditional control flow

`if`, `else if` and `else` all work as you would expect.

```sdw
if [E^1^] [E^2^] [else if [E^1^] [E^2^]]?* [else [E^2^]]?
```

where:
`[E^1^]` -> evaluates to a boolean. the conditional.. conditional
`[E^2^]` -> an expression as the body. the matching arm is what the whole expression evaluates to.

## type bounds 

- none
declares generic type
  
```sdw
type [name];
```

- generic aggregator
declare a type to be compatible with multiple generics

```sdw
type [unbound type] + [[unbound type] [+]-1?]?+;
```

- type name (can be user declared with `type` or a primitive type`)
    primtive types:
    * `int` / `unt` (64 bit by default? more integer types?)
    * `float`
    * `bool`
    * `string` [TODO: go further in depth]
    * NOTE: no primitive array types
    * NOTE: no null type

- structure defintion

```sdw
type [name] struct [[{ \
    [[type expression] [name][,]-1?]* \
}] | ;]
```

- pointer

```sdw
&[type]
```

- function / macro pointer
[TODO: re-reevaluate macro pointer syntax]

```
fn int do_the_thing(int arg1, int arg2) arg1 + arg2
type fp fn (int, int) -> int;

mac do_the_thing[] [..]
type mp mc [];

fn void run_the_thing(fp do_fp, mp do_mp) {
    do_fp(1, 2); // 3
    do_mp[]; // invokes the do_the_thing macro
}
```

## generic system

'generics' are a slight extension of the function overloading system.
declare a generic type by omitting a type bound.
you can then declare a function stub, substituting the generic bound for a resolute struct.
it acts like any other polymorphic function. the most specific implementation is used (ie. the passed type matches the resolute type)
example:

```sdw
type Print;
fn print(Print);
type Debug;
fn debug(Debug);

type Test struct;
fn print(Test to_print) {
    stdlib.printLn("test print");
}

fn debug(Test to_dbg_print) {
    stdlib.printLn("test debug");
}

// for simple examples, the interface tyoe can be specified like usual
fn debug(Debug debug_print) {
    debug(debug_print);
}

// for more complex relationships, the type can be declared outside of the function context
type DoType Debug + Print;
fn do(DoType do_on) {
    print(do_on);
    debug(do_on);
}
```

## moduling

a module is the `sdw` esquivalent of a `namespace` & is its translation unit.
they are declared with the `mod` keyword.

```sdw
mod [name] [[{[statements]*}] | ;]
```

the properties of a module can be accessed using a colon:

```sdw
[name]:[member name]
```

## grammar

so i don't know how to write the standard formal syntax
and honestly i'm not using a parser generator so i don't see a point ðŸ˜…
so enjoy my delusional, bracket heavy version lol

i'm not sure how to model complex relations (either formally or in my own script)
so *this is not at all exhaustive*. once the language becomes more ratified, i might try a coomprehensive syntax.

```syntax
IDN             ->  [_ | a-z | a-Z][_ | a-z | A-Z | 0-9]?*
GLOBIDN         ->  [[[IDN:]-1?]IDN] | IDN

EXPR            ->  [EXPR | EXPR;]
_EXPR           ->  [_EXPR + _EXPR] | [_EXPR - _EXPR] | [_EXPR * _EXPR] | [_EXPR / _EXPR] | [_EXPR % _EXPR] |\
                    [_EXPR | _EXPR] | [_EXPR & _EXPR] | [_EXPR ~ _EXPR] | [_EXPR ^ _EXPR] | [_EXPR >> _EXPR] | [_EXPR << _EXPR] |\
                    [-_EXPR] | [+_EXPR] [_EXPR || _EXPR] | [_EXPR && _EXPR] | [!_EXPR] |\
                    [_EXPR == _EXPR] | [_EXPR != _EXPR] | [_EXPR > _EXPR] | [_EXPR < _EXPR] | [_EXPR => _EXPR] | [_EXPR <= _EXPR] |\
                    [&_EXPR] | [*_EXPR] |\
                    { EXPR* } | (_EXPR) |\
                    IDN.IDN |\
                    GLOBIDN([IDN[,-1?]]?*) |\
                    if _EXPR BLOCK [else if _EXPR BLOCK]?* [else BLOCK]? |\
                    GLOBIDN |\
                    [#\[IDN [a-z | A-Z | 0-9]?*\] _EXPR]

TYPE            ->  IDN | &IDN
BOUND           ->  [] | [IDN[+-1?]]* | &IDN |\
                    int | unt | float | bool | string |\
                    struct [[{[ANYTYPE IDN[,]-1?]*}] | ;] |\
                    union [[{[ANYTYPE IDN[,]-1?]*}] | ;] |\
                    &ANYTYPE | [([TYPE[,-1?]]?*) -> TYPE]

BLOCK           ->  [EXPR | STATEMENT]*
STATEMENT       ->  fn TYPE IDN([TYPE IDN[,-1?]]?*) BLOCK; |\
                    fn TYPE IDN([TYPE[,-1?]]?*); |\
                    return BLOCK; |\
                    mc IDC\[\] [EXPR | state]*; |\
                    @IDN; |\
                    goto @IDN; |\
                    loop BLOCK; |\
                    type TYPE BOUND; |\
                    let IDN = BLOCK; |\
                    mod IDN [BLOCK | ;] |\
                    #\[IDN [a-z | A-Z | 0-9]?*\]
```

## TODO

* address current TODO comments
* type conversions
* operator precedence

## random shit

emulation of `enum`s in shadow
(rust vs `sdw`)

```rs
enum State {
    Done,
    Loading,
    Starting
}

fn progress(state: &State) {
    match {
        State::Done => println!("task is done"),
        State::Loading => println!("task is loading"),
        State::Starting => println!("task has started")
    }
}

fn main() {
    progress(State::Starting);
}
```

```sdw
type State;
fn progress(State);
type Loading struct;
type Starting struct;
type Done struct;

fn void progress(&Loading state) {
    stdlib.println("task is loading");
}
fn void progress(&Starting state) {
    stdlib.println("task has started"); 
}
fn void progress(&Done state) {
    stdlib.println("task is done");
}

fn int main() {
    progress(Starting {});
    return 0;
}
```

and another with tuple enum fields

```rs
enum Event {
    Col(u16, u16, u16),
    Quit
}

fn run(event: Event) {
    match event {
        Event::Col(r, g, b) => println!("red: {r}, green: {g}, blue: {b}"),
        Event::Quit => println!("application close"),
    }
}
```

```sdw
type Event;
fn run(Event);
type Col struct { unt r, unt g, unt b };
type Quit struct;

fn run(Col event) {
    stdlib.println("red: {}, green: {}, blue: {}", event.r, event.g, event.b);
}
fn run(Quit event) {
    stdlib.println("application close);
}
```


```sdw
fn do_some_thing() -> Option<i64> {
    if err { return None; }
    Some(10)
}

fn unwrap<T>(op: Option<T>) -> T {
    if let Some(i) = op {
        return i;
    }

    panic!("none");
}

fn main() {
    let op = do_some_thing();
    unwrap(op);
}
```

```sdw
type Option;
type SomeType;
type Some struct { SomeType some };
type None struct;

fn SomeType unwrap(Option);
fn SomeType unwrap(Some some) some.some
#[ no_return ]
fn SomeType op_unwrap(None _) panic["none"]

fn Option do_some_thing()
    if err { None {} } else Some { 10 }

fn void main() {
    let op = do_some_thing();
    op_unwrap(op);
}
```

```sdw
type Option<int> union { Some<int>, None };
type Some<int> struct { int some };
type None<int> struct;

fn int op_unwrap(Some<int> some) some.some
#[ no_return ]
fn int op_unwrap(None<int> _) panic["none"]

fn Option<int> do_some_thing()
    if err { None<int> {} } else Some<int> { 10 }

fn void main() {
    let op = do_some_thing();   // RUNTIME: Some *or* None
    op_unwrap(op);              // RUNTIME: op_unwrap() is dispatched to Some or None
}
```


